101a102,104
>     /* do a quick check if we have any expired items in the tail.. */
>     item *search;
>     rel_time_t oldest_live = settings.oldest_live;
103c106
<     item *search = heads[id];
---
>     search = tails[id];
105,107c108,125
<         // try to alloc a new item
<         if ((it = slabs_alloc(ntotal, id)) == NULL) {
<             // need to evict
---
>         if ((search->exptime != 0 && search->exptime < current_time)
>             || (search->time <= oldest_live && oldest_live <= current_time)) {  // dead by flush
>             STATS_LOCK();
>             stats.reclaimed++;
>             STATS_UNLOCK();
>             itemstats[id].reclaimed++;
>             if ((search->it_flags & ITEM_FETCHED) == 0) {
>                 STATS_LOCK();
>                 stats.expired_unfetched++;
>                 STATS_UNLOCK();
>                 itemstats[id].expired_unfetched++;
>             }
>             it = search;
>             slabs_adjust_mem_requested(it->slabs_clsid, ITEM_ntotal(it), ntotal);
>             do_item_unlink_nolock(it, hash(ITEM_key(it), it->nkey, 0));
>             /* Initialize the item block: */
>             it->slabs_clsid = 0;
>         } else if ((it = slabs_alloc(ntotal, id)) == NULL) {
114c132,134
< 
---
>             itemstats[id].evicted_time = current_time - search->time;
>             if (search->exptime != 0)
>                 itemstats[id].evicted_nonzero++;
125d144
<             // adjust the slab and unlink the head
144c163
<         /* If the FIFO is empty or locked, attempt to allocate memory */
---
>         /* If the LRU is empty or locked, attempt to allocate memory */
151a171,183
>         /* Last ditch effort. There was a very rare bug which caused
>          * refcount leaks. We leave this just in case they ever happen again.
>          * We can reasonably assume no item can stay locked for more than
>          * three hours, so if we find one in the tail which is that old,
>          * free it anyway.
>          */
>         if (search != NULL &&
>             search->refcount != 2 &&
>             search->time + TAIL_REPAIR_TIME < current_time) {
>             itemstats[id].tailrepairs++;
>             search->refcount = 1;
>             do_item_unlink_nolock(search, hash(ITEM_key(search), search->nkey, 0));
>         }
210c242
< static void item_link_q(item *it) { /* item is the new tail */
---
> static void item_link_q(item *it) { /* item is the new head */
217c249
<     assert(it != *tail);
---
>     assert(it != *head);
219,223c251,255
<     it->prev = *tail;
<     it->next = 0;
<     if (it->prev) it->prev->next = it;
<     *tail = it;
<     if (*head == 0) *head = it;
---
>     it->prev = 0;
>     it->next = *head;
>     if (it->next) it->next->prev = it;
>     *head = it;
>     if (*tail == 0) *tail = it;
315a348,358
>     if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
>         assert((it->it_flags & ITEM_SLABBED) == 0);
> 
>         mutex_lock(&cache_lock);
>         if ((it->it_flags & ITEM_LINKED) != 0) {
>             item_unlink_q(it);
>             it->time = current_time;
>             item_link_q(it);
>         }
>         mutex_unlock(&cache_lock);
>     }
538c581
< }
---
> }
\ No newline at end of file
Only in memcache-fifo: .deps
Only in memcache-fifo: .git
Only in memcached-1.4.14: .gitignore
Only in memcached-1.4.14: .shipit
Only in memcached-1.4.14: BUILD
Only in memcached-1.4.14: CONTRIBUTING
Only in memcache-fifo: DIFF
Only in memcached-1.4.14: Doxyfile
Only in memcached-1.4.14: HACKING
Only in memcached-1.4.14: LICENSE
Only in memcache-fifo: Makefile
Only in memcache-fifo: Makefile.in
Only in memcached-1.4.14: README.md
Only in memcache-fifo: README.txt
Only in memcache-fifo: aclocal.m4
Only in memcached-1.4.14: autogen.sh
Only in memcache-fifo: compile
Only in memcache-fifo: config.guess
Only in memcache-fifo: config.h
Only in memcache-fifo: config.h.in
Only in memcache-fifo: config.log
Only in memcache-fifo: config.status
Only in memcache-fifo: config.sub
Only in memcache-fifo: configure
Only in memcache-fifo: depcomp
Only in memcached-1.4.14: devtools
Common subdirectories: memcache-fifo/doc and memcached-1.4.14/doc
Only in memcached-1.4.14: globals.c
Only in memcache-fifo: install-sh
diff memcache-fifo/items.c memcached-1.4.14/items.c
87,90d86
< item **get_heads() {
<     return heads;
< }
< 
105a102,104
>     /* do a quick check if we have any expired items in the tail.. */
>     item *search;
>     rel_time_t oldest_live = settings.oldest_live;
107c106
<     item *search = heads[id];
---
>     search = tails[id];
109,111c108,125
<         // try to alloc a new item
<         if ((it = slabs_alloc(ntotal, id)) == NULL) {
<             // need to evict
---
>         if ((search->exptime != 0 && search->exptime < current_time)
>             || (search->time <= oldest_live && oldest_live <= current_time)) {  // dead by flush
>             STATS_LOCK();
>             stats.reclaimed++;
>             STATS_UNLOCK();
>             itemstats[id].reclaimed++;
>             if ((search->it_flags & ITEM_FETCHED) == 0) {
>                 STATS_LOCK();
>                 stats.expired_unfetched++;
>                 STATS_UNLOCK();
>                 itemstats[id].expired_unfetched++;
>             }
>             it = search;
>             slabs_adjust_mem_requested(it->slabs_clsid, ITEM_ntotal(it), ntotal);
>             do_item_unlink_nolock(it, hash(ITEM_key(it), it->nkey, 0));
>             /* Initialize the item block: */
>             it->slabs_clsid = 0;
>         } else if ((it = slabs_alloc(ntotal, id)) == NULL) {
118c132,134
< 
---
>             itemstats[id].evicted_time = current_time - search->time;
>             if (search->exptime != 0)
>                 itemstats[id].evicted_nonzero++;
129d144
<             // adjust the slab and unlink the head
148c163
<         /* If the FIFO is empty or locked, attempt to allocate memory */
---
>         /* If the LRU is empty or locked, attempt to allocate memory */
155a171,183
>         /* Last ditch effort. There was a very rare bug which caused
>          * refcount leaks. We leave this just in case they ever happen again.
>          * We can reasonably assume no item can stay locked for more than
>          * three hours, so if we find one in the tail which is that old,
>          * free it anyway.
>          */
>         if (search != NULL &&
>             search->refcount != 2 &&
>             search->time + TAIL_REPAIR_TIME < current_time) {
>             itemstats[id].tailrepairs++;
>             search->refcount = 1;
>             do_item_unlink_nolock(search, hash(ITEM_key(search), search->nkey, 0));
>         }
214c242
< static void item_link_q(item *it) { /* item is the new tail */
---
> static void item_link_q(item *it) { /* item is the new head */
221c249
<     assert(it != *tail);
---
>     assert(it != *head);
223,227c251,255
<     it->prev = *tail;
<     it->next = 0;
<     if (it->prev) it->prev->next = it;
<     *tail = it;
<     if (*head == 0) *head = it;
---
>     it->prev = 0;
>     it->next = *head;
>     if (it->next) it->next->prev = it;
>     *head = it;
>     if (*tail == 0) *tail = it;
319a348,358
>     if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
>         assert((it->it_flags & ITEM_SLABBED) == 0);
> 
>         mutex_lock(&cache_lock);
>         if ((it->it_flags & ITEM_LINKED) != 0) {
>             item_unlink_q(it);
>             it->time = current_time;
>             item_link_q(it);
>         }
>         mutex_unlock(&cache_lock);
>     }
diff memcache-fifo/items.h memcached-1.4.14/items.h
4,5d3
< item **get_heads(void);
< 
Common subdirectories: memcache-fifo/m4 and memcached-1.4.14/m4
Only in memcache-fifo: memcached.spec
Only in memcached-1.4.14: memcached.spec.in
Only in memcache-fifo: missing
Only in memcache-fifo: original_items.c
Common subdirectories: memcache-fifo/scripts and memcached-1.4.14/scripts
Only in memcache-fifo: stamp-h1
Common subdirectories: memcache-fifo/t and memcached-1.4.14/t
diff memcache-fifo/testapp.c memcached-1.4.14/testapp.c
1120,1167d1119
< static enum test_return test_binary_fifo_impl() {
<     uint64_t value = 0xdeadbeefdeadcafe;
<     union {
<         protocol_binary_request_no_extras request;
<         protocol_binary_response_no_extras response;
<         char bytes[1024];
<     } send, receive;
< 
<     for (int i = 0; i < 100; i++) {
<         char key[20];
<         snprintf(key, sizeof(key), "%s%d", "somekey", i);
<         size_t len = storage_command(send.bytes, sizeof(send.bytes), PROTOCOL_BINARY_CMD_ADD, key,
<                                 strlen(key), &value, sizeof(value),
<                                 0, 0);
<         safe_send(send.bytes, len, false);
<         safe_recv_packet(receive.bytes, sizeof(receive.bytes));
<         validate_response_header(&receive.response, PROTOCOL_BINARY_CMD_ADD,
<                                     PROTOCOL_BINARY_RESPONSE_SUCCESS);
< 
<         // make sure evictions happened in the fifo order
<         int flag = 0;
<         for (int ii = 0; ii <= i; ii++) {
<             char key2[20];
<             snprintf(key2, sizeof(key2), "%s%d", "somekey", ii);
<             size_t len = raw_command(send.bytes, sizeof(send.bytes), PROTOCOL_BINARY_CMD_GET,
<                                         key2, strlen(key2), NULL, 0);
<             safe_send(send.bytes, len, false);
<             safe_recv_packet(receive.bytes, sizeof(receive.bytes));
<             if (receive.response.message.header.response.status != PROTOCOL_BINARY_RESPONSE_KEY_ENOENT && !flag) {
<                 // evicted
<                 flag = 1;
<             } else if (flag) {
<                 // nothing should be evicted from now on
<                 validate_response_header(&receive.response, PROTOCOL_BINARY_CMD_GET,
<                                     PROTOCOL_BINARY_RESPONSE_SUCCESS);
<             }
<         }
<     }
< 
<     return TEST_PASS;
< }
< 
< 
< static enum test_return test_binary_fifo(void) {
<     return test_binary_fifo_impl();
< }
< 
< 
1834,1835c1786
<     // const int max = 2;
<     enum { max = 2 };
---
>     const int max = 2;
1935d1885
<     { "binary_fifo", test_binary_fifo },
Only in memcache-fifo: version.m4
Only in memcached-1.4.14: version.pl
Only in memcached-1.4.14: version.sh
Only in memcache-fifo: .deps
Only in memcache-fifo: .git
Only in memcached-1.4.14: .gitignore
Only in memcached-1.4.14: .shipit
Only in memcached-1.4.14: BUILD
Only in memcached-1.4.14: CONTRIBUTING
Only in memcache-fifo: DIFF
Only in memcached-1.4.14: Doxyfile
Only in memcached-1.4.14: HACKING
Only in memcached-1.4.14: LICENSE
Only in memcache-fifo: Makefile
Only in memcache-fifo: Makefile.in
Only in memcached-1.4.14: README.md
Only in memcache-fifo: README.txt
Only in memcache-fifo: aclocal.m4
Only in memcached-1.4.14: autogen.sh
Only in memcache-fifo: compile
Only in memcache-fifo: config.guess
Only in memcache-fifo: config.h
Only in memcache-fifo: config.h.in
Only in memcache-fifo: config.log
Only in memcache-fifo: config.status
Only in memcache-fifo: config.sub
Only in memcache-fifo: configure
Only in memcache-fifo: depcomp
Only in memcached-1.4.14: devtools
Common subdirectories: memcache-fifo/doc and memcached-1.4.14/doc
Only in memcached-1.4.14: globals.c
Only in memcache-fifo: install-sh
diff memcache-fifo/items.c memcached-1.4.14/items.c
87,90d86
< item **get_heads() {
<     return heads;
< }
< 
105a102,104
>     /* do a quick check if we have any expired items in the tail.. */
>     item *search;
>     rel_time_t oldest_live = settings.oldest_live;
107c106
<     item *search = heads[id];
---
>     search = tails[id];
109,111c108,125
<         // try to alloc a new item
<         if ((it = slabs_alloc(ntotal, id)) == NULL) {
<             // need to evict
---
>         if ((search->exptime != 0 && search->exptime < current_time)
>             || (search->time <= oldest_live && oldest_live <= current_time)) {  // dead by flush
>             STATS_LOCK();
>             stats.reclaimed++;
>             STATS_UNLOCK();
>             itemstats[id].reclaimed++;
>             if ((search->it_flags & ITEM_FETCHED) == 0) {
>                 STATS_LOCK();
>                 stats.expired_unfetched++;
>                 STATS_UNLOCK();
>                 itemstats[id].expired_unfetched++;
>             }
>             it = search;
>             slabs_adjust_mem_requested(it->slabs_clsid, ITEM_ntotal(it), ntotal);
>             do_item_unlink_nolock(it, hash(ITEM_key(it), it->nkey, 0));
>             /* Initialize the item block: */
>             it->slabs_clsid = 0;
>         } else if ((it = slabs_alloc(ntotal, id)) == NULL) {
118c132,134
< 
---
>             itemstats[id].evicted_time = current_time - search->time;
>             if (search->exptime != 0)
>                 itemstats[id].evicted_nonzero++;
129d144
<             // adjust the slab and unlink the head
148c163
<         /* If the FIFO is empty or locked, attempt to allocate memory */
---
>         /* If the LRU is empty or locked, attempt to allocate memory */
155a171,183
>         /* Last ditch effort. There was a very rare bug which caused
>          * refcount leaks. We leave this just in case they ever happen again.
>          * We can reasonably assume no item can stay locked for more than
>          * three hours, so if we find one in the tail which is that old,
>          * free it anyway.
>          */
>         if (search != NULL &&
>             search->refcount != 2 &&
>             search->time + TAIL_REPAIR_TIME < current_time) {
>             itemstats[id].tailrepairs++;
>             search->refcount = 1;
>             do_item_unlink_nolock(search, hash(ITEM_key(search), search->nkey, 0));
>         }
214c242
< static void item_link_q(item *it) { /* item is the new tail */
---
> static void item_link_q(item *it) { /* item is the new head */
221c249
<     assert(it != *tail);
---
>     assert(it != *head);
223,227c251,255
<     it->prev = *tail;
<     it->next = 0;
<     if (it->prev) it->prev->next = it;
<     *tail = it;
<     if (*head == 0) *head = it;
---
>     it->prev = 0;
>     it->next = *head;
>     if (it->next) it->next->prev = it;
>     *head = it;
>     if (*tail == 0) *tail = it;
319a348,358
>     if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
>         assert((it->it_flags & ITEM_SLABBED) == 0);
> 
>         mutex_lock(&cache_lock);
>         if ((it->it_flags & ITEM_LINKED) != 0) {
>             item_unlink_q(it);
>             it->time = current_time;
>             item_link_q(it);
>         }
>         mutex_unlock(&cache_lock);
>     }
diff memcache-fifo/items.h memcached-1.4.14/items.h
4,5d3
< item **get_heads(void);
< 
Common subdirectories: memcache-fifo/m4 and memcached-1.4.14/m4
Only in memcache-fifo: memcached.spec
Only in memcached-1.4.14: memcached.spec.in
Only in memcache-fifo: missing
Only in memcache-fifo: original_items.c
Common subdirectories: memcache-fifo/scripts and memcached-1.4.14/scripts
Only in memcache-fifo: stamp-h1
Common subdirectories: memcache-fifo/t and memcached-1.4.14/t
diff memcache-fifo/testapp.c memcached-1.4.14/testapp.c
1120,1167d1119
< static enum test_return test_binary_fifo_impl() {
<     uint64_t value = 0xdeadbeefdeadcafe;
<     union {
<         protocol_binary_request_no_extras request;
<         protocol_binary_response_no_extras response;
<         char bytes[1024];
<     } send, receive;
< 
<     for (int i = 0; i < 100; i++) {
<         char key[20];
<         snprintf(key, sizeof(key), "%s%d", "somekey", i);
<         size_t len = storage_command(send.bytes, sizeof(send.bytes), PROTOCOL_BINARY_CMD_ADD, key,
<                                 strlen(key), &value, sizeof(value),
<                                 0, 0);
<         safe_send(send.bytes, len, false);
<         safe_recv_packet(receive.bytes, sizeof(receive.bytes));
<         validate_response_header(&receive.response, PROTOCOL_BINARY_CMD_ADD,
<                                     PROTOCOL_BINARY_RESPONSE_SUCCESS);
< 
<         // make sure evictions happened in the fifo order
<         int flag = 0;
<         for (int ii = 0; ii <= i; ii++) {
<             char key2[20];
<             snprintf(key2, sizeof(key2), "%s%d", "somekey", ii);
<             size_t len = raw_command(send.bytes, sizeof(send.bytes), PROTOCOL_BINARY_CMD_GET,
<                                         key2, strlen(key2), NULL, 0);
<             safe_send(send.bytes, len, false);
<             safe_recv_packet(receive.bytes, sizeof(receive.bytes));
<             if (receive.response.message.header.response.status != PROTOCOL_BINARY_RESPONSE_KEY_ENOENT && !flag) {
<                 // evicted
<                 flag = 1;
<             } else if (flag) {
<                 // nothing should be evicted from now on
<                 validate_response_header(&receive.response, PROTOCOL_BINARY_CMD_GET,
<                                     PROTOCOL_BINARY_RESPONSE_SUCCESS);
<             }
<         }
<     }
< 
<     return TEST_PASS;
< }
< 
< 
< static enum test_return test_binary_fifo(void) {
<     return test_binary_fifo_impl();
< }
< 
< 
1834,1835c1786
<     // const int max = 2;
<     enum { max = 2 };
---
>     const int max = 2;
1935d1885
<     { "binary_fifo", test_binary_fifo },
Only in memcache-fifo: version.m4
Only in memcached-1.4.14: version.pl
Only in memcached-1.4.14: version.sh
